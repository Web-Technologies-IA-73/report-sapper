!function(){"use strict";const e=1614678397563,t=`cache${e}`,n=["/client/client.1da28c72.js","/client/inject_styles.5607aec6.js","/client/index.41c8d241.js","/client/about.b5b91ac6.js","/client/index.e5fbe988.js","/client/[slug].41644ae9.js","/client/_layout.696f123e.js","/client/LabNav.3fbf6a72.js","/client/index.3377365e.js","/client/description_of_the_subject_environment.076d94fc.js","/client/development_environment.e76273dd.js","/client/_layout.1d0d57e6.js","/client/index.e9d1b3a5.js","/client/catalogue.2030d793.js","/client/product.9ac38dd9.js","/client/cart.5238363e.js","/client/site_location.7aef1e3b.js","/client/conclusion.a562ff18.js","/client/_layout.ae7de244.js","/client/index.4af5f3a4.js","/client/floating_elements.854d6587.js","/client/identifiers.91675d27.js","/client/_layout.afb56c9a.js","/client/index.50100189.js","/client/grouping.4d9e8b93.js","/client/other.fecc283d.js","/client/_layout.288d9a43.js","/client/index.c6552128.js","/client/embedding.c9b27b70.js","/client/import.13a95256.js","/client/inline.d2da449a.js","/client/indents.b36eeeeb.js","/client/lists.3ef0d496.js","/client/_layout.30341c78.js","/client/index.99eea08c.js","/client/_layout.4ac31c59.js","/client/index.d3724260.js","/client/_layout.53c31757.js","/client/index.4157dfe9.js","/client/_layout.ff2c2870.js","/client/index.b86eb8cb.js","/client/_layout.ca434a2f.js","/client/index.40cfeb58.js","/client/_layout.9fd5831c.js","/client/index.93a30757.js","/client/_layout.f4c90079.js","/client/index.43b00378.js","/client/index.d664ff33.js","/client/prism-okaidia.c69ad818.js","/client/prism-xml-doc.6485befb.js","/client/prism-line-numbers.e216b9e0.js","/client/prism-line-highlight.6bd06295.js","/client/prism-line-highlight.6eea236f.js","/client/prism-css.c6083894.js"].concat(["/service-worker-index.html","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json"]),i=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url),c=n.protocol.startsWith("http"),s=n.hostname===self.location.hostname&&n.port!==self.location.port,l=n.host===self.location.host&&i.has(n.pathname),a="only-if-cached"===t.request.cache&&!l;!c||s||a||t.respondWith((async()=>l&&await caches.match(t.request)||async function(t){const n=await caches.open(`offline${e}`);try{const e=await fetch(t);return n.put(t,e.clone()),e}catch(e){const i=await n.match(t);if(i)return i;throw e}}(t.request))())}))}();

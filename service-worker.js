!function(){"use strict";const e=1614666830461,t=`cache${e}`,n=["/client/client.6bd7b3ab.js","/client/inject_styles.5607aec6.js","/client/index.a5d409a4.js","/client/about.e07b1f9d.js","/client/index.473a6c74.js","/client/[slug].f804a041.js","/client/_layout.965a8cea.js","/client/LabNav.fabf5728.js","/client/index.a1ac0535.js","/client/description_of_the_subject_environment.6234df56.js","/client/development_environment.8daec1b7.js","/client/_layout.db287f65.js","/client/index.8a67897e.js","/client/catalogue.9fc5d968.js","/client/product.c4e98595.js","/client/cart.75eb3941.js","/client/site_location.8184319f.js","/client/conclusion.f43b2c6e.js","/client/_layout.9e00e938.js","/client/index.6b7b4b76.js","/client/_layout.777069a8.js","/client/index.6a948f99.js","/client/_layout.f8e027e4.js","/client/index.321244d3.js","/client/_layout.82c5ba29.js","/client/index.7851d107.js","/client/_layout.88030de2.js","/client/index.48bb8c66.js","/client/_layout.2e8534f4.js","/client/index.a1e6af49.js","/client/_layout.5d8e11aa.js","/client/index.c01efef1.js","/client/_layout.e2816316.js","/client/index.2c57a6c5.js","/client/index.6d015ea9.js","/client/prism-okaidia.c69ad818.js","/client/prism-xml-doc.6485befb.js","/client/prism-line-numbers.e216b9e0.js"].concat(["/service-worker-index.html","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json"]),c=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url),i=n.protocol.startsWith("http"),s=n.hostname===self.location.hostname&&n.port!==self.location.port,a=n.host===self.location.host&&c.has(n.pathname),l="only-if-cached"===t.request.cache&&!a;!i||s||l||t.respondWith((async()=>a&&await caches.match(t.request)||async function(t){const n=await caches.open(`offline${e}`);try{const e=await fetch(t);return n.put(t,e.clone()),e}catch(e){const c=await n.match(t);if(c)return c;throw e}}(t.request))())}))}();

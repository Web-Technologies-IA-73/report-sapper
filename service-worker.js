!function(){"use strict";const e=1614664539621,t=`cache${e}`,n=["/client/client.57f1d9c8.js","/client/inject_styles.5607aec6.js","/client/index.0fe50e24.js","/client/about.22771a46.js","/client/index.cc966678.js","/client/[slug].e4cb363d.js","/client/_layout.ca2e5afe.js","/client/LabNav.1726b2b8.js","/client/index.b39fd07b.js","/client/description_of_the_subject_environment.798eb750.js","/client/development_environment.f8b3185b.js","/client/_layout.72c6a964.js","/client/index.baa3bbed.js","/client/catalogue.e7a188a8.js","/client/product.29d71981.js","/client/cart.c1732a25.js","/client/site_location.a8eba555.js","/client/conclusion.04d2d269.js","/client/_layout.f61216e3.js","/client/index.a800a2f7.js","/client/_layout.b1f4c62e.js","/client/index.f8af8053.js","/client/_layout.aedc3f62.js","/client/index.44ab9c19.js","/client/_layout.fedcd1cd.js","/client/index.11123ddc.js","/client/_layout.aa0c4994.js","/client/index.341b3846.js","/client/_layout.661500ba.js","/client/index.7086c716.js","/client/_layout.484a6c9c.js","/client/index.cb19f637.js","/client/_layout.683f7c55.js","/client/index.a3aa245d.js","/client/index.1a7c6618.js","/client/prism-okaidia.c69ad818.js","/client/prism-xml-doc.6485befb.js","/client/prism-line-numbers.e216b9e0.js"].concat(["/service-worker-index.html","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json"]),c=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url),i=n.protocol.startsWith("http"),s=n.hostname===self.location.hostname&&n.port!==self.location.port,a=n.host===self.location.host&&c.has(n.pathname),l="only-if-cached"===t.request.cache&&!a;!i||s||l||t.respondWith((async()=>a&&await caches.match(t.request)||async function(t){const n=await caches.open(`offline${e}`);try{const e=await fetch(t);return n.put(t,e.clone()),e}catch(e){const c=await n.match(t);if(c)return c;throw e}}(t.request))())}))}();

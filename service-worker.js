!function(){"use strict";const e=1614678376246,t=`cache${e}`,n=["/client/client.0f7762e8.js","/client/inject_styles.5607aec6.js","/client/index.3e597e7c.js","/client/about.0f081c87.js","/client/index.5a0ceebe.js","/client/[slug].44aa038b.js","/client/_layout.daa12b4c.js","/client/LabNav.d9644247.js","/client/index.06ee1f04.js","/client/description_of_the_subject_environment.30a09bae.js","/client/development_environment.12024c59.js","/client/_layout.d66d9c72.js","/client/index.e5a8b831.js","/client/catalogue.70656b9d.js","/client/product.dcae7231.js","/client/cart.fc2176e2.js","/client/site_location.a21fc27e.js","/client/conclusion.ee031a8e.js","/client/_layout.c42780a0.js","/client/index.f608ef91.js","/client/_layout.2ee3447e.js","/client/index.bbebf3a0.js","/client/_layout.1af004dc.js","/client/index.9fb21a60.js","/client/_layout.8008853d.js","/client/index.340c7f45.js","/client/_layout.d746502f.js","/client/index.a882c0bb.js","/client/_layout.39c9abb9.js","/client/index.7c96a07d.js","/client/_layout.6d853672.js","/client/index.73133976.js","/client/_layout.066639ad.js","/client/index.bd326e54.js","/client/index.b308eb4c.js","/client/prism-okaidia.c69ad818.js","/client/prism-xml-doc.6485befb.js","/client/prism-line-numbers.e216b9e0.js"].concat(["/service-worker-index.html","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json"]),c=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url),i=n.protocol.startsWith("http"),s=n.hostname===self.location.hostname&&n.port!==self.location.port,a=n.host===self.location.host&&c.has(n.pathname),l="only-if-cached"===t.request.cache&&!a;!i||s||l||t.respondWith((async()=>a&&await caches.match(t.request)||async function(t){const n=await caches.open(`offline${e}`);try{const e=await fetch(t);return n.put(t,e.clone()),e}catch(e){const c=await n.match(t);if(c)return c;throw e}}(t.request))())}))}();

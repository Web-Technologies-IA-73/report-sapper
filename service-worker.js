!function(){"use strict";const e=1614666865748,t=`cache${e}`,n=["/client/client.c7d2b611.js","/client/inject_styles.5607aec6.js","/client/index.191d1ea6.js","/client/about.82d65bc8.js","/client/index.2f058c27.js","/client/[slug].4c92682c.js","/client/_layout.1267c28f.js","/client/LabNav.b17eeba2.js","/client/index.f33306a9.js","/client/description_of_the_subject_environment.4b478004.js","/client/development_environment.f1c521da.js","/client/_layout.f17a7293.js","/client/index.70166df8.js","/client/catalogue.278d090d.js","/client/product.f05ff6f1.js","/client/cart.324fb501.js","/client/site_location.c8045e4a.js","/client/conclusion.2c6ab5dc.js","/client/_layout.fe78234f.js","/client/index.00c58700.js","/client/_layout.fa8df9ab.js","/client/index.6faa9236.js","/client/_layout.f4a12c4e.js","/client/index.65a37ca4.js","/client/_layout.54441e6c.js","/client/index.aa336f71.js","/client/_layout.28324a62.js","/client/index.206a35d7.js","/client/_layout.2cbd4bf6.js","/client/index.9383d66c.js","/client/_layout.f94d3982.js","/client/index.276f8742.js","/client/_layout.a6ebc728.js","/client/index.4017c9aa.js","/client/index.502538bd.js","/client/prism-okaidia.c69ad818.js","/client/prism-xml-doc.6485befb.js","/client/prism-line-numbers.e216b9e0.js"].concat(["/service-worker-index.html","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json"]),c=new Set(n);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(n))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const n of e)n!==t&&await caches.delete(n);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const n=new URL(t.request.url),i=n.protocol.startsWith("http"),s=n.hostname===self.location.hostname&&n.port!==self.location.port,a=n.host===self.location.host&&c.has(n.pathname),l="only-if-cached"===t.request.cache&&!a;!i||s||l||t.respondWith((async()=>a&&await caches.match(t.request)||async function(t){const n=await caches.open(`offline${e}`);try{const e=await fetch(t);return n.put(t,e.clone()),e}catch(e){const c=await n.match(t);if(c)return c;throw e}}(t.request))())}))}();
